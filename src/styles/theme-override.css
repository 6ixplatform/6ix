/* Variables that everything can read */
html {
    color-scheme: light dark !important;
}

/* Light */
html:not(.dark) {
    --th-bg: #ffffff !important;
    --th-text: #0c0c0d !important;
    --th-border: rgba(0, 0, 0, .12) !important;
    --page-bg: var(--th-bg) !important;
}

html:not(.dark) body {
    background: var(--th-bg) !important;
    color: var(--th-text) !important;
    border-color: var(--th-border) !important;
}

/* Dark */
html.dark {
    --th-bg: #0b0b0c !important;
    --th-text: #ffffff !important;
    --th-border: rgba(255, 255, 255, .14) !important;
    --page-bg: var(--th-bg) !important;
}

html.dark body {
    background: var(--th-bg) !important;
    color: var(--th-text) !important;
    border-color: var(--th-border) !important;
}

/* Catch common “stubborn” selectors from legacy styles */
html:not(.dark) body,
html:not(.dark) .app,
html:not(.dark) #__next,
html:not(.dark) [data-app-root] {
    background: var(--th-bg) !important;
    color: var(--th-text) !important;
}

html.dark body,
html.dark .app,
html.dark #__next,
html.dark [data-app-root] {
    background: var(--th-bg) !important;
    color: var(--th-text) !important;
}


/* =========================
GLOBAL FOREGROUND FIXES
========================= */

/* 0) Make any icon vars follow the theme */
:root {
    --icon-fg: var(--th-text) !important;
}

/* 1) Force readable text on most elements */
html:not(.dark) body,
html:not(.dark) body :where(p, span, li, div, small, strong, em, h1, h2, h3, h4, h5, h6, a, button, label, input, textarea, select, code, pre),
html.dark body,
html.dark body :where(p, span, li, div, small, strong, em, h1, h2, h3, h4, h5, h6, a, button, label, input, textarea, select, code, pre) {
    color: var(--th-text) !important;
}

/* 2) Make SVGs inherit the current text color (icons) */
:where(svg, svg *) {
    fill: currentColor !important;
    stroke: currentColor !important;
}

/* 3) Inputs & placeholders */
:where(input, textarea) {
    color: var(--th-text) !important;
    border-color: var(--th-border) !important;
    background: transparent;
    /* remove random light/dark fills */
}

:where(input, textarea)::placeholder {
    /* subtle placeholder that adapts to theme */
    color: color-mix(in srgb, var(--th-text) 55%, transparent) !important;
}

/* 4) Neutralize the most common hard colors from legacy/Tailwind */
html:not(.dark) :where(.text-white, .text-zinc-50, .text-zinc-100, .text-gray-50, .text-gray-100) {
    color: var(--th-text) !important;
}

html.dark :where(.text-black, .text-zinc-900, .text-gray-900) {
    color: var(--th-text) !important;
}

/* Optional: a softer "muted" token you can use if needed */
:root {
    --th-muted: color-mix(in srgb, var(--th-text) 70%, var(--th-bg));
}

.muted {
    color: var(--th-muted) !important;
}

/* === Modal & icon fixes (append to your @layer six-override file) === */
@layer six-override {

    /* Universal theme vars already exist; add icon helpers */
    html:not(.dark) {
        --icon-on: #000;
        /* icons on light surfaces */
        --icon-muted: rgba(0, 0, 0, .55);
    }

    html.dark {
        --icon-on: #fff;
        /* icons on dark surfaces */
        --icon-muted: rgba(255, 255, 255, .65);
    }

    /* Make every modal/popover use theme colors and sit on top */
    [role="dialog"],
    .six-modal,
    .popover,
    .menu {
        color: var(--th-text);
        background: var(--th-bg);
        border: 1px solid var(--th-border);
        z-index: 10040 !important;
        /* above app chrome */
    }

    /* backdrops */
    .six-backdrop {
        position: fixed;
        inset: 0;
        z-index: 10039 !important;
        backdrop-filter: blur(6px);
        background: color-mix(in oklab, var(--th-bg), transparent 65%);
    }

    /* Speaker / generic icon paths can be made white-on-dark, black-on-light */
    .icon-speaker,
    .icon-on,
    .msg-body svg path.icon-on {
        fill: var(--icon-on) !important;
        color: var(--icon-on) !important;
    }

    /* Ensure form controls inherit readable text color */
    button, input, select, textarea {
        color: var(--th-text);
        border-color: var(--th-border);
        background-color: transparent;
    }
}

/* ---------- THEME KILL-SWITCH OVERRIDE ---------- */
/* Load this AFTER globals.css, 6ix.css, theme.css, etc. */

:root {
    --accent: #3b82f6;
    --accent-fg: #fff;
    --th-bg: #0b0b0e;
    --th-bg-soft: #141418;
    --th-text: #e7e7ea;
    --th-border: rgba(255, 255, 255, .14);
    --surface: var(--th-bg-soft);
    --backdrop: blur(12px) saturate(120%);
}

/* Light/Dark scheme */
html[data-theme="light"] {
    color-scheme: light;
}

html[data-theme="dark"] {
    color-scheme: dark;
}

html[data-theme="light"] :where(:root) {
    --th-bg: #ffffff;
    --th-bg-soft: #fafafa;
    --th-text: #0b0b0e;
    --th-border: rgba(0, 0, 0, .12);
}

/* Live wallpaper → glass tokens */
html[data-live="1"] :where(:root) {
    --th-bg: rgba(12, 12, 16, .30);
    --th-bg-soft: rgba(20, 20, 26, .48);
    --th-border: rgba(255, 255, 255, .18);
    --backdrop: blur(16px) saturate(140%);
}

/* App/page background & text (win everywhere) */
html, body, #__next, #root, #app, .themed-page {
    background: var(--th-bg) !important;
    color: var(--th-text) !important;
}

/* Cards / panels / menus / modals / popovers */
:where(.card, .panel, .dropdown, .menu, .popover, .sheet, .drawer, .modal, .modal-surface, [role="dialog"], [role="menu"]) {
    background: var(--surface) !important;
    color: var(--th-text) !important;
    border: 1px solid var(--th-border) !important;
    backdrop-filter: var(--backdrop) !important;
}

/* App bars / headers */
:where(header, .app-header, .AppHeader, [data-role="appbar"]) {
    background: var(--th-bg) !important;
    color: var(--th-text) !important;
    border-bottom: 1px solid var(--th-border) !important;
    backdrop-filter: var(--backdrop) !important;
}

/* Inputs */
:where(input, textarea, select) {
    background: var(--surface) !important;
    color: var(--th-text) !important;
    border: 1px solid var(--th-border) !important;
}

/* Accent usage (primary buttons & links) */
:where(.btn, .button, .Button, .primary, .btn-primary, .btn-accent, button[data-variant="primary"]) {
    background: var(--accent) !important;
    color: var(--accent-fg) !important;
    border-color: transparent !important;
}

:where(a, .link, .Link, .link-accent, [data-accent="link"]) {
    color: var(--accent) !important;
}

:where(*):focus-visible {
    outline-color: var(--accent) !important;
}

::selection {
    background: color-mix(in oklab, var(--accent) 35%, transparent);
    color: var(--accent-fg);
}

/* Backdrops behind modals */
:where(.backdrop, .modal-backdrop, .DialogOverlay, .sheet-backdrop, .drawer-backdrop, [data-backdrop]) {
    background: color-mix(in oklab, var(--th-bg) 65%, transparent) !important;
    backdrop-filter: blur(10px) saturate(120%) !important;
}

/* Tailwind hard classes → force tokens (so video shows through) */
:where(.bg-white, .bg-gray-50, .bg-slate-50, .bg-neutral-50, .bg-zinc-50) {
    background-color: var(--th-bg) !important;
}

/* also catch arbitrary colors like bg-[#fff] / bg-[rgba(...)] */
:where([class*="bg-[#"], [class*="bg-[rgb"], [class*="bg-[hsl"]) {
    background-color: var(--th-bg) !important;
}

:where(.bg-black, .bg-gray-900, .bg-slate-900, .bg-neutral-900, .bg-zinc-900) {
    background-color: var(--th-bg) !important;
}

:where(.text-black, .text-gray-900, .text-neutral-900, .text-zinc-900,
    .text-white, .text-gray-100, .text-neutral-100, .text-zinc-100) {
    color: var(--th-text) !important;
}

/* catch arbitrary text colors: text-[#...], text-[rgb...], text-[hsl...] */
:where([class*="text-[#"], [class*="text-[rgb"], [class*="text-[hsl"]) {
    color: var(--th-text) !important;
}

/* borders/dividers */
:where([class*="border-"], .border, .divide-x, .divide-y) {
    border-color: var(--th-border) !important;
}

/* catch arbitrary border colors */
:where([class*="border-[#"], [class*="border-[rgb"], [class*="border-[hsl"]) {
    border-color: var(--th-border) !important;
}

/* ---------- THEME KILL-SWITCH OVERRIDE (AI page) ---------- */
/* This file MUST be imported last. */

/* Base tokens */
:root {
    --accent: #3b82f6;
    --accent-fg: #fff;
    --accent-link: var(--accent);

    --th-bg: #0b0b0e;
    --th-bg-soft: #141418;
    --th-text: #e7e7ea;
    --th-border: rgba(255, 255, 255, .14);
    --surface: var(--th-bg-soft);
    --backdrop: blur(12px) saturate(120%);
}

html[data-theme="light"] {
    color-scheme: light;
}

html[data-theme="dark"] {
    color-scheme: dark;
}

html[data-theme="light"] :where(:root) {
    --th-bg: #ffffff;
    --th-bg-soft: #fafafa;
    --th-text: #0b0b0e;
    --th-border: rgba(0, 0, 0, .12);
}

/* Live mode makes backgrounds glassy and lets the video show through */
html[data-live="1"] :where(:root) {
    --th-bg: rgba(12, 12, 16, .30);
    --th-bg-soft: rgba(20, 20, 26, .48);
    --th-border: rgba(255, 255, 255, .18);
    --backdrop: blur(16px) saturate(140%);
}

/* App / page canvas */
html, body, #__next, #root, #app, .themed-page {
    background: var(--th-bg) !important;
    color: var(--th-text) !important;
}

/* Make the AI page background react to accent + live */
.ai-shell {
    background:
        linear-gradient(180deg,
            color-mix(in oklab, var(--accent) 12%, var(--th-bg)) 0%,
            var(--th-bg) 60%) !important;
}

html[data-live="1"] .ai-shell {
    background:
        linear-gradient(180deg,
            color-mix(in oklab, var(--accent) 18%, transparent) 0%,
            transparent 55%) !important;
}

/* Cards / panels / menus / modals */
:where(.card, .panel, .dropdown, .menu, .popover, .sheet, .drawer, .modal, .modal-surface, [role="dialog"], [role="menu"]) {
    background: var(--surface) !important;
    color: var(--th-text) !important;
    border: 1px solid var(--th-border) !important;
    backdrop-filter: var(--backdrop) !important;
}

/* Headers/AppBars */
:where(header, .app-header, .AppHeader, [data-role="appbar"]) {
    background: var(--th-bg) !important;
    color: var(--th-text) !important;
    border-bottom: 1px solid var(--th-border) !important;
    backdrop-filter: var(--backdrop) !important;
}

/* Inputs */
:where(input, textarea, select) {
    background: var(--surface) !important;
    color: var(--th-text) !important;
    border: 1px solid var(--th-border) !important;
}

/* Primary actions & links adopt the accent */
:where(.btn, .button, .Button, .primary, .btn-primary, .btn-accent, button[data-variant="primary"]) {
    background: var(--accent) !important;
    color: var(--accent-fg) !important;
    border-color: transparent !important;
}

:where(a, .link, .Link, .link-accent, [data-accent="link"]) {
    color: var(--accent) !important;
}

:where(*):focus-visible {
    outline-color: var(--accent) !important;
}

::selection {
    background: color-mix(in oklab, var(--accent) 35%, transparent);
    color: var(--accent-fg);
}

/* Backdrops behind modals */
:where(.backdrop, .modal-backdrop, .DialogOverlay, .sheet-backdrop, .drawer-backdrop, [data-backdrop]) {
    background: color-mix(in oklab, var(--th-bg) 65%, transparent) !important;
    backdrop-filter: blur(10px) saturate(120%) !important;
}

/* Message lists / big scroll surfaces remain see-through in live */
.ai-shell :where(.message-list, .messages, .scroller) {
    background: transparent !important;
}



/* Scrollbar tint */
* {
    scrollbar-color: color-mix(in oklab, var(--th-text) 40%, transparent) transparent;
}

/* Live tile “selected” flicker */
@keyframes livePulse {
    0%, 100% {
        box-shadow: 0 0 0 2px var(--th-bg), 0 0 0 3px var(--accent);
    }

    50% {
        box-shadow: 0 0 0 2px var(--th-bg), 0 0 0 6px color-mix(in oklab, var(--accent) 60%, transparent);
    }
}

.live-card[data-selected="true"] {
    animation: livePulse 1.1s ease-in-out infinite;
}

/* STEP: force the chat canvas to use theme tokens (or be glassy in live mode) */
:where(.ai-shell, .chat-list, .message-list, .messages, .scroller) {
    background: var(--th-bg) !important;
    color: var(--th-text) !important;
}

/* If you use live wallpaper (html[data-live="1"]), let it show through */
html[data-live="1"] :where(.ai-shell, .chat-list, .message-list, .messages, .scroller) {
    background: transparent !important;
}

/* Step 2 — expose the page theme on the AI route */
.ai-shell,
.ai-shell :where(main, .min-h-svh, .min-h-screen) {
    background: transparent !important;
}

.ai-shell :where(.messages, .message-list, .chat-list, .scroller) {
    background: transparent !important;
}

/* Live wallpaper layer */
#six-live-wallpaper {
    position: fixed;
    inset: 0;
    width: 100vw;
    height: 100vh;
    object-fit: cover;
    z-index: 0;
    /* behind UI, above page background */
    pointer-events: none;
}

/* Kill any old pseudo-backgrounds when live mode is on */
html[data-live="1"] body::before,
html[data-live="1"] body::after {
    content: none !important;
}

/* Make major containers transparent so the video is visible */
html[data-live="1"] body,
html[data-live="1"] #__next,
html[data-live="1"] #root,
html[data-live="1"] #app,
html[data-live="1"] .themed-page,
html[data-live="1"] .ai-shell,
html[data-live="1"] .min-h-svh,
html[data-live="1"] .message-list,
html[data-live="1"] .messages,
html[data-live="1"] .scroller {
    background: transparent !important;
}

/* Ensure UI sits above the video */
html[data-live="1"] .app-header,
html[data-live="1"] .chat-list,
html[data-live="1"] .composer-root,
html[data-live="1"] .ai-shell,
html[data-live="1"] .themed-page {
    position: relative;
    z-index: 1;
}

/* AI page background: solid by default, transparent only when live video is on */
.ai-shell {
    background: var(--th-bg) !important;
}

html[data-live="1"] .ai-shell {
    background: transparent !important;
}